ApplyPriceErrorThresholds: THEORY
BEGIN
  IMPORTING CheckPriceErrorBound_Lemmas

  %-----------------------------
  % Result type
  %-----------------------------
  ExchangeResultV10: TYPE = [#
    numWheatReceived: int64,
    numSheepSend:     int64,
    wheatStays:       bool
  #]

  %-----------------------------
  % Rounding types + state
  %-----------------------------
  RoundingType: TYPE = { NORMAL, PATH_PAYMENT_STRICT_RECEIVE, PATH_PAYMENT_STRICT_SEND }

  State: TYPE = [#
    price:  Price,
    wheatStays: bool,
    sS: nnint64,
    wR: nnint64,
    round:  RoundingType
  #]

  wf_state?(s: State) : bool =
    (PATH_PAYMENT_STRICT_SEND?(s`round) IMPLIES NOT (s`sS = 0)) AND
    ((s`wR > 0 AND s`sS > 0 AND s`wheatStays) IMPLIES s`price`d * s`sS >= s`price`n * s`wR) AND
    ((s`wR > 0 AND s`sS > 0 AND NOT s`wheatStays) IMPLIES s`price`n * s`wR >= s`price`d * s`sS)

  
  wf_state : TYPE = (wf_state?)

  %-----------------------------
  % Threshold adjustment
  %-----------------------------
  applyPriceErrorThresholds(s: wf_state): ExchangeResultV10 =
    LET wR = s`wR, sS = s`sS, round = s`round, wheatStays = s`wheatStays,
      adj_pair: [# wr: int64, ss: int64 #] =
        IF (wR > 0 AND sS > 0) THEN
          IF round = NORMAL THEN
            IF checkPriceErrorBound(s`price, wR, sS, False)
              THEN (# wr := wR, ss := sS #)
              ELSE (# wr := 0, ss := 0 #) ENDIF
          ELSE
            IF checkPriceErrorBound(s`price, wR, sS, True)
            THEN (# wr := wR, ss := sS #)
            ELSE (# wr := wR, ss := sS #) ENDIF
          ENDIF
        ELSE
          CASES round OF
            PATH_PAYMENT_STRICT_SEND: (# wr := 0, ss := sS #),
            NORMAL: (# wr := 0, ss := 0 #),
            PATH_PAYMENT_STRICT_RECEIVE: (# wr := 0, ss := 0 #)
          ENDCASES
        ENDIF
    IN (# numWheatReceived := adj_pair`wr,
        numSheepSend     := adj_pair`ss,
        wheatStays       := wheatStays #)
END ApplyPriceErrorThresholds



ApplyPriceErrorThresholds_Lemmas: THEORY
BEGIN

  IMPORTING ApplyPriceErrorThresholds

  %---------------------------------------------------------------------------
  % ≤1% bound when in NORMAL mode
  %---------------------------------------------------------------------------
  thresholds_normal_bounded_error_no_trade: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s),
        price = (s`price`n/s`price`d), effP = (s`sS/s`wR)
      IN (s`round = NORMAL) AND (s`wR > 0 AND s`sS > 0) AND
        NOT (abs(price - effP)/(price) <= 1/100) IMPLIES
        (r`numWheatReceived = 0 AND r`numSheepSend = 0)
  
  thresholds_normal_bounded_error_successful: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s),
        price = (s`price`n/s`price`d), effP = (s`sS/s`wR)
      IN (s`round = NORMAL) AND (s`wR > 0 AND s`sS > 0) AND
        (abs(price - effP)/(price) <= 1/100) IMPLIES
        (r`numWheatReceived = s`wR AND r`numSheepSend = s`sS)

  %---------------------------------------------------------------------------
  %  ≤1% bound when favouring sheep and not in NORMAL mode
  %---------------------------------------------------------------------------
  thresholds_path_error_bounded_favor_sheep: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s),
        price = (s`price`n/s`price`d), effP = (s`sS/s`wR)
      IN (s`wR > 0 AND s`sS > 0) AND (abs(price - effP)/(price) <= 1/100) AND
        (s`round = PATH_PAYMENT_STRICT_SEND OR
          s`round = PATH_PAYMENT_STRICT_RECEIVE) IMPLIES
        (r`numWheatReceived = s`wR AND r`numSheepSend = s`sS)
  
  %---------------------------------------------------------------------------
  % Unbounded rounding error when not in NORMAL mode
  %---------------------------------------------------------------------------
  thresholds_path_error_unbounded_favor_wheat: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s),
        price = (s`price`n/s`price`d), effP = (s`sS/s`wR)
      IN (s`wR > 0 AND s`sS > 0) AND (abs(price - effP)/(price) > 0) AND
        (s`round = PATH_PAYMENT_STRICT_SEND OR
          s`round = PATH_PAYMENT_STRICT_RECEIVE) IMPLIES
        (r`numWheatReceived = s`wR AND r`numSheepSend = s`sS)

  %---------------------------------------------------------------------------
  % No trade happens when effectivePrice = 0 (NORMAL)
  %---------------------------------------------------------------------------
  thresholds_normal_no_trade_if_wR_or_sS_equal_zero: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s)
      IN (s`round = NORMAL) AND (s`wR = 0 OR s`sS = 0) IMPLIES
        (r`numWheatReceived = 0 AND r`numSheepSend = 0)

  %---------------------------------------------------------------------------
  % No trade happens when effectivePrice = 0 (PATH_PAYMENT_STRICT_RECEIVE)
  %---------------------------------------------------------------------------
  thresholds_path_receive_no_trade_if_wR_or_sS_equal_zero: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s)
      IN (s`round = PATH_PAYMENT_STRICT_RECEIVE) AND (s`wR = 0 OR s`sS = 0)
        IMPLIES (r`numWheatReceived = 0 AND r`numSheepSend = 0)
  
  %---------------------------------------------------------------------------
  % Sell sheep for no wheat allowed (PATH_PAYMENT_STRICT_SEND mode)
  %---------------------------------------------------------------------------
  thresholds_path_send_sS_not_zero_if_wR_or_sS_equal_zero: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s)
      IN (s`round = PATH_PAYMENT_STRICT_SEND) AND (s`wR = 0 OR s`sS = 0)
        IMPLIES NOT (s`sS = 0)
 
  %---------------------------------------------------------------------------
  % Sell sheep for no wheat recorded (PATH_PAYMENT_STRICT_SEND mode)
  %---------------------------------------------------------------------------
  record_path_send_sS_not_zero_if_wR_or_sS_equal_zero: LEMMA
    FORALL (s: wf_state):
      LET r = applyPriceErrorThresholds(s)
      IN (s`round = PATH_PAYMENT_STRICT_SEND) AND (s`wR = 0)
        IMPLIES (r`numWheatReceived = 0 AND r`numSheepSend = s`sS)

END ApplyPriceErrorThresholds_Lemmas

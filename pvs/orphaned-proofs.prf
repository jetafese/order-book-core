(("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  |ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|ceil_div| SUBTYPE
   "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
   "int"))
 ("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  . 0))(("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  |ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|ceil_div| SUBTYPE
   "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
   "int"))
 ("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  . 0))(("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  |ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|ceil_div| SUBTYPE
   "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
   "int"))
 ("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  . 0))(("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  |big_mul_u_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|big_mul_u| SUBTYPE "number_fields.*(JetExchangeV10.a, JetExchangeV10.b)"
   "uint128"))
 ("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  |ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|ceil_div| SUBTYPE
   "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
   "int"))
 ("jet_order_book"
  (|ceil_div_TCC1| 0
   (|ceil_div_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|ceil_div| SUBTYPE
     "number_fields./(((number_fields.+)(JetExchangeV10.x, ((number_fields.-)(JetExchangeV10.y, 1)))), JetExchangeV10.y)"
     "int")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC2-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.INT64_MAX" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |u64_to_i64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|u64_to_i64| SUBTYPE "JetExchangeV10.x" "int64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  |i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64"))
 ("jet_order_book"
  (|i64_to_u64_TCC1| 0
   (|i64_to_u64_TCC1-1| NIL 3969638648 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|i64_to_u64| SUBTYPE "JetExchangeV10.x" "uint64")))
  . 0))(("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |thresholds_normal_TCC2-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.ss" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |thresholds_normal_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.wr" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10_TCC2-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numSheepSend" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC8-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  NIL NIL
  (|applyPriceErrorThresholds| SUBTYPE "JetExchangeV10.adj_pair`wr" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC7-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  NIL NIL
  (|applyPriceErrorThresholds| SUBTYPE "JetExchangeV10.adj_pair`ss" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC6-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  ((|big_mul| CONST-DECL "uint128" |JetExchangeV10| NIL)
   (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
   (INT64_MIN CONST-DECL "int" |JetExchangeV10| NIL)
   (INT64_MAX CONST-DECL "int" |JetExchangeV10| NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
  NIL (|applyPriceErrorThresholds| SUBTYPE "0" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC5-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  ((|big_mul| CONST-DECL "uint128" |JetExchangeV10| NIL)
   (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
   (INT64_MIN CONST-DECL "int" |JetExchangeV10| NIL)
   (INT64_MAX CONST-DECL "int" |JetExchangeV10| NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
  NIL (|applyPriceErrorThresholds| SUBTYPE "0" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC4-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  ((|big_mul| CONST-DECL "uint128" |JetExchangeV10| NIL)
   (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
   (INT64_MIN CONST-DECL "int" |JetExchangeV10| NIL)
   (INT64_MAX CONST-DECL "int" |JetExchangeV10| NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
  NIL (|applyPriceErrorThresholds| SUBTYPE "0" "int64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC3-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  NIL NIL (|applyPriceErrorThresholds| SUBTYPE "JetExchangeV10.p`d" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC2-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  NIL NIL (|applyPriceErrorThresholds| SUBTYPE "JetExchangeV10.sS" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |applyPriceErrorThresholds_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL)
  NIL NIL (|applyPriceErrorThresholds| SUBTYPE "JetExchangeV10.wR" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC6-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.sheepSend" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC5-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.errD" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC4-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.wheatReceive" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC3-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.errN" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC2-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.price`d" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |checkPriceErrorBound_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "JetExchangeV10.price`n" "nnint64"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC11-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div_numden| CONST-DECL "int" |JetExchangeV10| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div(JetExchangeV10.wheatValue, JetExchangeV10.price`d, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC10-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div_numden(JetExchangeV10.wheatReceive, JetExchangeV10.price`n, JetExchangeV10.price`d, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC9-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div_numden| CONST-DECL "int" |JetExchangeV10| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div(JetExchangeV10.sheepValue, JetExchangeV10.price`d, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC8-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div_numden(JetExchangeV10.wheatReceive, JetExchangeV10.price`n, JetExchangeV10.price`d, JetExchangeV10.ROUND_UP)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC7-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div_numden(JetExchangeV10.sheepSend_tmp, JetExchangeV10.price`d, JetExchangeV10.price`n, JetExchangeV10.ROUND_UP)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC6-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.sheepSend_tmp" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC5-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div(JetExchangeV10.wheatValue, JetExchangeV10.price`n, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC4-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div_numden(JetExchangeV10.sheepSend_tmp, JetExchangeV10.price`d, JetExchangeV10.price`n, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC3-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.sheepSend_tmp" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC2-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div(JetExchangeV10.sheepValue, JetExchangeV10.price`n, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |exchangeV10WithoutPriceErrorThresholds_TCC1-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL)
  ((|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|floor_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|big_div| CONST-DECL "int" |JetExchangeV10| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (NIL APPLICATION-JUDGEMENT "upto(n)" |modulo_arithmetic| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
  NIL
  (|exchangeV10WithoutPriceErrorThresholds| SUBTYPE
   "JetExchangeV10.big_div(JetExchangeV10.sheepValue, JetExchangeV10.price`n, JetExchangeV10.ROUND_DOWN)"
   "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |calculateOfferValue_TCC2-1| NIL 3970155821
  ("" (SUBTYPE-TCC) (("" (GRIND :THEORIES ("real_props")) NIL NIL)) NIL)
  ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_gt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|pos| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL))
  NIL
  (|calculateOfferValue| SUBTYPE
   "number_fields.*(JetExchangeV10.maxReceive, JetExchangeV10.d)" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |calculateOfferValue_TCC1-1| NIL 3970155821
  ("" (SUBTYPE-TCC) (("" (GRIND :THEORIES ("real_props")) NIL NIL)) NIL)
  ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_gt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_lt_is_strict_total_order| NAME-JUDGEMENT
    "(strict_total_order?[real])" |real_props| NIL)
   (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
   (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|pos| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|natp| TYPE-EQ-DECL NIL |JetExchangeV10| NIL)
   (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL))
  NIL
  (|calculateOfferValue| SUBTYPE
   "number_fields.*(JetExchangeV10.maxSend, JetExchangeV10.n)" "natp"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |big_mul_TCC1-1| NIL 3970155821
  ("" (SUBTYPE-TCC)
   (("" (GRIND :THEORIES ("real_props"))
     (("" (HIDE -1 -4) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
   NIL)
  NIL NIL
  (|big_mul| SUBTYPE "number_fields.*(JetExchangeV10.a, JetExchangeV10.b)"
   "uint128"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |big_div_numden_TCC2-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|big_div_numden| SUBTYPE "JetExchangeV10.d" "posnat"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |big_div_numden_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|big_div_numden| SUBTYPE "JetExchangeV10.d" "posnat"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  |floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat"))
 ("jet_order_book"
  (|floor_div_TCC1| 0
   (|floor_div_TCC1-1| NIL 3970155821 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|floor_div| SUBTYPE "JetExchangeV10.y" "posnat")))
  . 0))(("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970155821
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC2-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.ss"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970155821
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970155821
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970155821
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  . 0))(("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.ss" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.wr" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numSheepSend" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  . 0))(("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC2-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.ss"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  . 0))(("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.ss" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.wr" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numSheepSend" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  . 0))(("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC2-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.ss"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  . 0))(("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.ss" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.wr" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numSheepSend" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  . 0))(("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC2-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.ss"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  . 0))(("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.ss" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |thresholds_normal_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal| SUBTYPE "JetExchangeV10.wr" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC2-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numSheepSend" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  |exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64"))
 ("jet_order_book"
  (|exchangeV10_TCC1| 0
   (|exchangeV10_TCC1-1| NIL 3970219217 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|exchangeV10| SUBTYPE "JetExchangeV10.before`numWheatReceived" "int64")))
  . 0))(("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC2-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.ss"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  |thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
  ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
  (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
   "int64"))
 ("jet_order_book"
  (|thresholds_normal_no_trade_if_exceeds_TCC1| 0
   (|thresholds_normal_no_trade_if_exceeds_TCC1-1| NIL 3970219217
    ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
    (|thresholds_normal_no_trade_if_exceeds| SUBTYPE "JetExchangeV10_1.wr"
     "int64")))
  . 0))(("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC6-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL
  (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.sheepSend" "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC5-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.errD" "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC4-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL
  (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.wheatReceive"
   "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC3-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.errN" "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC2-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL
  (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.price`d" "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |checkPriceErrorBound_TCC1-1| NIL 3970651413 ("" (SUBTYPE-TCC) NIL NIL) NIL
  NIL
  (|checkPriceErrorBound| SUBTYPE "CheckPriceErrorBound.price`n" "nnint64"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  |big_mul_TCC1-1| NIL 3970651413
  ("" (SKOLEM-TYPEPRED)
   (("" (GRIND)
     (("" (HIDE -1 -4) (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL))
       NIL))
     NIL))
   NIL)
  ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
   (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
   (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
    NIL)
   (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
   (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props|
    NIL)
   (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
    NIL)
   (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
   (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
   (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
   (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
   (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
   (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
   (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
   (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
   (<= CONST-DECL "bool" |reals| NIL)
   (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
   (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
   (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
   (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
   (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
   (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (>= CONST-DECL "bool" |reals| NIL)
   (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
   (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (> CONST-DECL "bool" |reals| NIL)
   (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
   (|exp2| DEF-DECL "posnat" |exp2| NIL)
   (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
   (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
   (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
   (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
   (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
  NIL
  (|big_mul| SUBTYPE
   "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
   "uint128"))
 ("checkPriceErrorBound"
  (|big_mul_TCC1| 0
   (|big_mul_TCC1-1| NIL 3970651413
    ("" (SKOLEM-TYPEPRED)
     (("" (GRIND)
       (("" (HIDE -1 -4)
         (("" (GRIND) (("" (YICES2 :NONLINEAR? T) NIL NIL)) NIL)) NIL))
       NIL))
     NIL)
    ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
     (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
     (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
      NIL)
     (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
     (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
      |real_props| NIL)
     (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
      |integers| NIL)
     (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
     (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
     (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
     (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
     (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
     (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
     (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
     (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
     (<= CONST-DECL "bool" |reals| NIL)
     (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
     (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
     (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
     (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
     (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
     (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (>= CONST-DECL "bool" |reals| NIL)
     (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
     (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (> CONST-DECL "bool" |reals| NIL)
     (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
     (|exp2| DEF-DECL "posnat" |exp2| NIL)
     (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
     (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
     (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
     (|nnint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
     (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
    NIL
    (|big_mul| SUBTYPE
     "number_fields.*(CheckPriceErrorBound.a, CheckPriceErrorBound.b)"
     "uint128")))
  . 0))(("checkPriceErrorBound"
  (|lemma_arbitrary_erro| 0
   (|lemma_arbitrary_erro-1| NIL 3970658355
    ("" (SKEEP :PREDS? T)
     (("" (HIDE -1 -4)
       (("" (GROUND)
         (("" (GROUND)
           (("1" (EXPAND "checkPriceErrorBound")
             (("1" (LIFT-IF)
               (("1" (GROUND)
                 (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                  ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                  ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                 NIL))
               NIL))
             NIL)
            ("2" (EXPAND "checkPriceErrorBound")
             (("2" (LIFT-IF)
               (("2" (GROUND)
                 (("2" (LEMMA "lemma_within_one_percent_normal")
                   (("2" (INST -1 "p" "wR" "sS")
                     (("2" (ASSERT)
                       (("2" (PROP)
                         (("1" (EXPAND "checkPriceErrorBound")
                           (("1" (PROPAX) NIL NIL)) NIL)
                          ("2" (POSTPONE) NIL NIL))
                         NIL))
                       NIL))
                     NIL))
                   NIL))
                 NIL))
               NIL))
             NIL))
           NIL))
         NIL))
       NIL))
     NIL)
    NIL SHOSTAK))
  |lemma_arbitrary_erro-1| NIL 3970658355
  ("" (SKEEP :PREDS? T)
   (("" (HIDE -1 -4)
     (("" (GROUND)
       (("" (GROUND)
         (("1" (EXPAND "checkPriceErrorBound")
           (("1" (LIFT-IF)
             (("1" (GROUND)
               (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
               NIL))
             NIL))
           NIL)
          ("2" (EXPAND "checkPriceErrorBound")
           (("2" (LIFT-IF)
             (("2" (GROUND)
               (("2" (LEMMA "lemma_within_one_percent_normal")
                 (("2" (INST -1 "p" "wR" "sS")
                   (("2" (ASSERT)
                     (("2" (PROP)
                       (("1" (EXPAND "checkPriceErrorBound")
                         (("1" (PROPAX) NIL NIL)) NIL)
                        ("2" (POSTPONE) NIL NIL))
                       NIL))
                     NIL))
                   NIL))
                 NIL))
               NIL))
             NIL))
           NIL))
         NIL))
       NIL))
     NIL))
   NIL)
  NIL SHOSTAK)
 ("checkPriceErrorBound"
  (|lemma_arbitrary_erro| 0
   (|lemma_arbitrary_erro-1| NIL 3970658355
    ("" (SKEEP :PREDS? T)
     (("" (HIDE -1 -4)
       (("" (GROUND)
         (("" (GROUND)
           (("1" (EXPAND "checkPriceErrorBound")
             (("1" (LIFT-IF)
               (("1" (GROUND)
                 (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                  ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                  ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                 NIL))
               NIL))
             NIL)
            ("2" (EXPAND "checkPriceErrorBound")
             (("2" (LIFT-IF)
               (("2" (GROUND)
                 (("2" (LEMMA "lemma_within_one_percent_normal")
                   (("2" (INST -1 "p" "wR" "sS")
                     (("2" (ASSERT)
                       (("2" (PROP)
                         (("1" (EXPAND "checkPriceErrorBound")
                           (("1" (PROPAX) NIL NIL)) NIL)
                          ("2" (POSTPONE) NIL NIL))
                         NIL))
                       NIL))
                     NIL))
                   NIL))
                 NIL))
               NIL))
             NIL))
           NIL))
         NIL))
       NIL))
     NIL)
    NIL SHOSTAK))
  . 0))(("checkPriceErrorBound"
  (|CheckPriceErrorBound_1|
   (|lemma_within_one_percent_normal_TCC1| 0
    (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC2| 0
    (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC3| 0
    (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE
      "(CheckPriceErrorBound_1.price)" "nznum")))
   (|lemma_within_one_percent_normal| 0
    (|lemma_within_one_percent_normal-1| NIL 3970656645
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (GROUND)
          (("" (GROUND)
            (("1" (EXPAND "checkPriceErrorBound")
              (("1" (GROUND)
                (("1" (LIFT-IF)
                  (("1" (GROUND)
                    (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                     ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
      (|times_div1| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK))
   (|lemma_arbitrary_error| 0
    (|lemma_arbitrary_error-1| NIL 3970661491
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (ASSERT)
          (("" (EXPAND "checkPriceErrorBound")
            (("" (LIFT-IF)
              (("" (GROUND)
                (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK)))
  |lemma_arbitrary_error| 0
  (|lemma_arbitrary_error-1| NIL 3970661491
   ("" (SKEEP :PREDS? T)
    (("" (HIDE -1 -4)
      (("" (ASSERT)
        (("" (EXPAND "checkPriceErrorBound")
          (("" (LIFT-IF)
            (("" (GROUND)
              (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
               ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
               ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
    (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
    (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   SHOSTAK))
 ("checkPriceErrorBound"
  (|CheckPriceErrorBound_1|
   (|lemma_within_one_percent_normal_TCC1| 0
    (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC2| 0
    (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC3| 0
    (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE
      "(CheckPriceErrorBound_1.price)" "nznum")))
   (|lemma_within_one_percent_normal| 0
    (|lemma_within_one_percent_normal-1| NIL 3970656645
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (GROUND)
          (("" (GROUND)
            (("1" (EXPAND "checkPriceErrorBound")
              (("1" (GROUND)
                (("1" (LIFT-IF)
                  (("1" (GROUND)
                    (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                     ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
      (|times_div1| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK))
   (|lemma_arbitrary_error| 0
    (|lemma_arbitrary_error-1| NIL 3970661491
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (ASSERT)
          (("" (EXPAND "checkPriceErrorBound")
            (("" (LIFT-IF)
              (("" (GROUND)
                (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK)))
  |lemma_within_one_percent_normal| 0
  (|lemma_within_one_percent_normal-1| NIL 3970656645
   ("" (SKEEP :PREDS? T)
    (("" (HIDE -1 -4)
      (("" (GROUND)
        (("" (GROUND)
          (("1" (EXPAND "checkPriceErrorBound")
            (("1" (GROUND)
              (("1" (LIFT-IF)
                (("1" (GROUND)
                  (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                   ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
    (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   SHOSTAK))
 ("checkPriceErrorBound"
  (|CheckPriceErrorBound_1|
   (|lemma_within_one_percent_normal_TCC1| 0
    (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC2| 0
    (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC3| 0
    (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE
      "(CheckPriceErrorBound_1.price)" "nznum")))
   (|lemma_within_one_percent_normal| 0
    (|lemma_within_one_percent_normal-1| NIL 3970656645
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (GROUND)
          (("" (GROUND)
            (("1" (EXPAND "checkPriceErrorBound")
              (("1" (GROUND)
                (("1" (LIFT-IF)
                  (("1" (GROUND)
                    (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                     ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
      (|times_div1| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK))
   (|lemma_arbitrary_error| 0
    (|lemma_arbitrary_error-1| NIL 3970661491
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (ASSERT)
          (("" (EXPAND "checkPriceErrorBound")
            (("" (LIFT-IF)
              (("" (GROUND)
                (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK)))
  |lemma_within_one_percent_normal_TCC3| 0
  (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|lemma_within_one_percent_normal| SUBTYPE "(CheckPriceErrorBound_1.price)"
    "nznum")))
 ("checkPriceErrorBound"
  (|CheckPriceErrorBound_1|
   (|lemma_within_one_percent_normal_TCC1| 0
    (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC2| 0
    (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC3| 0
    (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE
      "(CheckPriceErrorBound_1.price)" "nznum")))
   (|lemma_within_one_percent_normal| 0
    (|lemma_within_one_percent_normal-1| NIL 3970656645
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (GROUND)
          (("" (GROUND)
            (("1" (EXPAND "checkPriceErrorBound")
              (("1" (GROUND)
                (("1" (LIFT-IF)
                  (("1" (GROUND)
                    (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                     ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
      (|times_div1| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK))
   (|lemma_arbitrary_error| 0
    (|lemma_arbitrary_error-1| NIL 3970661491
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (ASSERT)
          (("" (EXPAND "checkPriceErrorBound")
            (("" (LIFT-IF)
              (("" (GROUND)
                (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK)))
  |lemma_within_one_percent_normal_TCC2| 0
  (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
   ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
   (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
    "nznum")))
 ("checkPriceErrorBound"
  (|CheckPriceErrorBound_1|
   (|lemma_within_one_percent_normal_TCC1| 0
    (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC2| 0
    (|lemma_within_one_percent_normal_TCC2-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
     (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.wR"
      "nznum")))
   (|lemma_within_one_percent_normal_TCC3| 0
    (|lemma_within_one_percent_normal_TCC3-1| NIL 3970657432
     ("" (SUBTYPE-TCC) NIL NIL)
     ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
      (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
      (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
      (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
      (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields|
       NIL)
      (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
      (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
      (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
      (<= CONST-DECL "bool" |reals| NIL)
      (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
      (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
      (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
      (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
      (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
      (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (>= CONST-DECL "bool" |reals| NIL)
      (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
      (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (> CONST-DECL "bool" |reals| NIL)
      (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
      (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
      (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
      (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
      (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (/= CONST-DECL "boolean" |notequal| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     NIL
     (|lemma_within_one_percent_normal| SUBTYPE
      "(CheckPriceErrorBound_1.price)" "nznum")))
   (|lemma_within_one_percent_normal| 0
    (|lemma_within_one_percent_normal-1| NIL 3970656645
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (GROUND)
          (("" (GROUND)
            (("1" (EXPAND "checkPriceErrorBound")
              (("1" (GROUND)
                (("1" (LIFT-IF)
                  (("1" (GROUND)
                    (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                     ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND :THEORIES ("real_props")) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
      (|times_div1| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK))
   (|lemma_arbitrary_error| 0
    (|lemma_arbitrary_error-1| NIL 3970661491
     ("" (SKEEP :PREDS? T)
      (("" (HIDE -1 -4)
        (("" (ASSERT)
          (("" (EXPAND "checkPriceErrorBound")
            (("" (LIFT-IF)
              (("" (GROUND)
                (("1" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("2" (GRIND :THEORIES ("real_props")) NIL NIL)
                 ("3" (GRIND :THEORIES ("real_props")) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ((|exp2| DEF-DECL "posnat" |exp2| NIL)
      (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint"
       |integers| NIL)
      (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|big_mul| CONST-DECL "uint128" |CheckPriceErrorBound| NIL)
      (|both_sides_times_pos_gt2| FORMULA-DECL NIL |real_props| NIL)
      (|minus_div1| FORMULA-DECL NIL |real_props| NIL)
      (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
      (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs|
       NIL)
      (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
      (|abs_div| FORMULA-DECL NIL |real_props| NIL)
      (|div_div2| FORMULA-DECL NIL |real_props| NIL)
      (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
      (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
      (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
      (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
      (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
      (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int"
       |integers| NIL)
      (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
       |real_defs| NIL)
      (|real_lt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
      (|checkPriceErrorBound| CONST-DECL "bool" |CheckPriceErrorBound| NIL)
      (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers|
       NIL)
      (|times_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
      (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
       |real_defs| NIL)
      (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
      (|real_gt_is_strict_total_order| NAME-JUDGEMENT
       "(strict_total_order?[real])" |real_props| NIL)
      (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
      (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
       |real_props| NIL)
      (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
     SHOSTAK)))
  |lemma_within_one_percent_normal_TCC1| 0
  (|lemma_within_one_percent_normal_TCC1-1| NIL 3970657432
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posint64| TYPE-EQ-DECL NIL |CheckPriceErrorBound| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|lemma_within_one_percent_normal| SUBTYPE "CheckPriceErrorBound_1.p`d"
    "nznum"))))